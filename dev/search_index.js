var documenterSearchIndex = {"docs":
[{"location":"abstract/","page":"-","title":"-","text":"Julia is a high-level dynamic programming language designed for numerical and scientific computing, data analysis, machine learning, and more. Julia's user-friendly interface, resembling popular languages like R, Python, and Matlab, makes it easily accessible for learners. Its focus on performance, however, enables computational speeds that often rival, or even surpass, those of low-level languages such as C or Fortran. Therefore, Julia is an ideal choice for large-scale data analysis and other computationally intensive tasks, as it can be orders of magnitude faster than R or Python. In this workshop, we will introduce you to the basics of Julia and the key features that set it apart from other languages.","category":"page"},{"location":"abstract/","page":"-","title":"-","text":"This workshop is designed for R/Python/Matlab users interested in learning a new programming language or wanting to improve their data analysis and scientific computing skills. No prior experience with Julia is required, but understanding a programming language is recommended.","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"We will finish this chapter with an exercise that makes use of some of the basic syntax elements described before. Our goal is to implement linear regression.  During the course of the workshop, we will come back to this example several times. Let's first have a look at what linear regression is: Suppose you observe the two variables education (in years) and income (per month in dollar), and you want to predict a persons income based on their education. One way to do this is linear regression. Suppose we conducted a study and observed the following data points:","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"using Random\nRandom.seed!(1243)\n\nusing Plots\ndefault(legend = false)\n\nx = 10 .+ 3*randn(20)\nβ = 300\nα = 1000\ny = α .+ β*x + 500*randn(20)\n\nplot(x, y; seriestype=:scatter, xlabel = \"Education\", ylabel = \"Income\")\nsavefig(\"data.png\")","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"(Image: data)","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"On the x-axis, you see the years of education, and on the y-axis you see the monthly income. The task of linear regression is to find a straight line that best describes this relationship:","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"Plots.abline!(β, α)\nsavefig(\"lr.png\")","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"(Image: lr)","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"As you may recal from university, school, or learn just now, a straight line is mathematically described by y = alpha + beta x, where in our case, y corresponds to income and x to years of education.","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"compat: Exercise\nWrite a function predict that takes x, α and β as inputs and returns the predicted value for y.","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"<details>\n<summary>show solution</summary>\n<br>","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"tip: Solution\nfunction predict(x, α, β)\n    y = α .+ β*x\n    return y\nend","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"</details>","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"\n","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"function predict(x, α, β)\n    y = α .+ β*x\n    return y\nend","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"Let's simulate some data for the task at hand. First, we load the Random package (a julia package for random number generation) and set a seed (to make our experiments reproducible):","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"using Random\nRandom.seed!(1243)","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"Next, we generate some random values for years of education:","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"x = 10 .+ 3*randn(20)","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"This produces a vector of 20 values with 10 years of education as the average, and some normally distributed random variation.","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"compat: Exercise\nUse your previously defined function predict to generate some values for income (y) with α = 1000, β = 300","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"<details>\n<summary>show solution</summary>\n<br>","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"tip: Solution\ny = predict(x, 1000, 300)","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"y = predict(x, 1000, 300) #hide","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"</details>","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"\n Since in reality, income dose not perfectly depend on education, but there is some random variation, we add this random variation to y:","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"y += 500*randn(20)","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"And viola! We have some data to work with.","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"In reality of course, we don't know the values for alpha and beta, but we have to estimate them from the data. To do so, we first need some indication of how good a certain combination of values works for our data. Usually, we use the sum of squared errors for this task:","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"sum_i=1^n (haty_i - y_i)^2","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"So we go through all of our n data points (i = 1, ..., n) and for each of those data points we compute the squared distance between the prediction, haty_i, and the value we observed in reality, y_i.","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"compat: Exercise\nDefine a function squared_error that takes a vector of predicted values and a vector of observed values as input and computes the sum of squared errors between them.","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"<details>\n<summary>show solution</summary>\n<br>","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"tip: Solution\nfunction squared_error(y, ŷ)\n    error = 0.0\n    for i in eachindex(y)\n        error += (y[i] - ŷ[i])^2\n    end\n    return error\nendor, a bit shorter using broadcasting:function squared_error(y, ŷ)\n    return sum((y - ŷ).^2)\nend","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"function squared_error(y, ŷ)\n    return sum((y - ŷ).^2)\nend","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"</details>","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"\n","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"compat: Exercise\nUsing your previously defined predict and squared_error functions to define a function squared_error_regression that takes as input values for α, β, x and y and returns as output the squared error between predictions and observed values. Then, use this function to compute the squared error for the parameter values 1. β = 100, α = 200 and 2. β = 300, α = 1000","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"<details>\n<summary>show solution</summary>\n<br>","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"tip: Solution\nfunction squared_error_regression(α, β, y, x)\n    return squared_error(y, predict(x, α, β))\nend\n\nsquared_error_regression(200, 100, y, x)\nsquared_error_regression(1000, 300, y, x)","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"function squared_error_regression(α, β, y, x) #hide\n    return squared_error(y, predict(x, α, β)) #hide\nend #hide\n #hide\nsquared_error_regression(200, 100, y, x) #hide","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"squared_error_regression(1000, 300, y, x) #hide","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"</details>","category":"page"},{"location":"Chapter1/exercise/","page":"Exercise","title":"Exercise","text":"\nYou should see that the error corresponding to the true parameters we used to simulate the data is much lower.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Workshop","category":"page"},{"location":"#What-is-this-Workshop-about?","page":"Home","title":"What is this Workshop about?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"import Markdown; Markdown.parse_file(\"../src/abstract.md\")","category":"page"},{"location":"Chapter2/exercise/#Exercise","page":"Exercise","title":"Exercise","text":"","category":"section"},{"location":"Chapter2/exercise/","page":"Exercise","title":"Exercise","text":"In this exercise, you will define a type which is (hopefully) more closely related to your research than Pokemon. We will continue our example from the first chapter, linear regression. Suppose you collcted your data on education, but with some measurement error (people lie about their education, or they are not shure what exactly counts into the number of years, ...). Of cours this is not limited to the example of education, but observing data with measurement error is a central concept in most empirical sciences.","category":"page"},{"location":"Chapter2/exercise/","page":"Exercise","title":"Exercise","text":"compat: Exercise\nDefine the composite type Measurement, that is able to store a measurement and the magnitude of error of that measurement. It should be a subtype of AbstractFloat and have an inner constructor that converts the magnitude of measurement to a positive number. Hint: you can use the function abs(...) to take the absolute value of a number.","category":"page"},{"location":"Chapter2/exercise/","page":"Exercise","title":"Exercise","text":"<details>\n<summary>show solution</summary>\n<br>","category":"page"},{"location":"Chapter2/exercise/","page":"Exercise","title":"Exercise","text":"tip: Solution\nstruct Measurement <: AbstractFloat\n    value\n    error\n    Measurement(val, err) = new(val, abs(err))\nend","category":"page"},{"location":"Chapter2/exercise/","page":"Exercise","title":"Exercise","text":"struct Measurement <: AbstractFloat\n    value\n    error\n    Measurement(val, err) = new(val, abs(err))\nend","category":"page"},{"location":"Chapter2/exercise/","page":"Exercise","title":"Exercise","text":"</details>","category":"page"},{"location":"Chapter2/exercise/","page":"Exercise","title":"Exercise","text":"\n","category":"page"},{"location":"Chapter2/exercise/","page":"Exercise","title":"Exercise","text":"compat: Exercise\nDefine the function ±(value, error) to create a new instance of the Measurement type, and create some measurements.","category":"page"},{"location":"Chapter2/exercise/","page":"Exercise","title":"Exercise","text":"<details>\n<summary>show solution</summary>\n<br>","category":"page"},{"location":"Chapter2/exercise/","page":"Exercise","title":"Exercise","text":"tip: Solution\n±(val, err) = Measurement(val, err)\n\nm1 = 2.98 ± 0.43\nm2 = 0.34 ± 1.34","category":"page"},{"location":"Chapter2/exercise/","page":"Exercise","title":"Exercise","text":"±(value, error) = Measurement(value, error)\n\nm1 = 2.98 ± 0.43\nm2 = 0.34 ± 1.34","category":"page"},{"location":"Chapter2/exercise/","page":"Exercise","title":"Exercise","text":"</details>","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"using InteractiveUtils","category":"page"},{"location":"Chapter2/types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"Chapter2/types/#Introduction","page":"Types","title":"Introduction","text":"","category":"section"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"In julia, every variable has a type.  We can use the function typeof (just like in R) to tell us the type of a variable. For example:","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"a = 1.0\ntypeof(a)","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"b = \"Hello!\"\ntypeof(b)","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"c = rand(10)\ntypeof(c)","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"We see that, for example, the type of double-precision floating point numers is called Float64 in julia.","category":"page"},{"location":"Chapter2/types/#Abstract-Types","page":"Types","title":"Abstract Types","text":"","category":"section"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"However, in addition to the types a variable can have, there are so-called \"abstract types\". Abstract types \"bundle\" concrete types together, and form a \"type hierarchy\". Let's have a look:","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"typeof(a)","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"supertype(Float64)","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"subtypes(AbstractFloat)","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"The function supertype allows us to inspect the next higher abstract type in the type hierarchy. In this case, this type is called AbstractFloat Caling subtypes on AbstractFloat, we see that Float64 is \"bundled\" together with some other types, for example single precision floating point numbers (Float32). If we would explore this type hierarchy further, we could see something like:","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"danger: Insert picture of type hierarchy\nhttps://en.wikibooks.org/wiki/Introducing_Julia/Types#/media/File:Julia-number-type-hierarchy.svg","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"In julia, we can easily define new abstract types:","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"abstract type MySpecialNumber <: Number end","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"defines a new abstract type MySpecialNumber that is a subtype of Number.","category":"page"},{"location":"Chapter2/types/#Composite-types","page":"Types","title":"Composite types","text":"","category":"section"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"The most import kind of type we will encounter during this workshop is called a \"composite type\". Composite types are also called \"structs\" and they allow us to create very useful objects.  For example, suppose we are writing a video game for the well-known Pokemon series,  we could define some abstract types","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"abstract type Pokemon end\nabstract type Normal <: Pokemon end\nabstract type Fire <: Pokemon end\nabstract type Flying <: Pokemon end\nabstract type Electric <: Pokemon end","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"and then a composite type","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"struct Pikachu <: Electric\n    nickname\n    attack\n    defense\n    speed\n    hp\nend","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"We now have an abstract type Pokemon with subtypes Normal, Fire, Flying and Electric, and a composite type Pikachu which is a subtype of Electric. We are now able to create our very own Pikachu to fight in our team:","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"my_pikachu = Pikachu(\"Pika\", 135, 80, 110, 132)\ntypeof(my_pikachu)","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"which creates a variable my_pikachu of type Pikachu.","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"compat: Exercise\nCreate a new composite type for a pokemon of your choice of type Flying, and create an instance of that pokemon.","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"<details>\n<summary>show solution</summary>\n<br>","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"tip: Solution\nstruct Crobat <: Flying\n    nickname\n    attack\n    defense\n    speed\n    hp\nend\n\nmy_crobat = Crobat(\"Xwing\", 105, 100, 210, 112)","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"struct Crobat <: Flying\n    nickname\n    attack\n    defense\n    speed\n    hp\nend\n\nmy_crobat = Crobat(\"Xwing\", 105, 100, 210, 112)","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"</details>","category":"page"},{"location":"Chapter2/types/","page":"Types","title":"Types","text":"danger: Insert footnote for source of pokemon example\nhttps://gdalle.github.io/JuliaComputationSolutions/hw1a_solutions.html","category":"page"},{"location":"Chapter2/types/#Constructors","page":"Types","title":"Constructors","text":"","category":"section"}]
}
